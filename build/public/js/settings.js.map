{"version":3,"sources":["node_modules/browser-pack/_prelude.js","node_modules/simple-transition/index.js","public/js/settings/TestController.js","public/js/settings/index.js","public/js/settings/mdl/textfield.js","public/js/settings/tests/WindowMessenger.js","public/js/settings/tests/index.js","public/js/settings/views/spinner.js","public/js/utils/parseHTML.js"],"names":[],"mappings":"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","file":"settings.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","module.exports = function transition(el, obj, duration, easing) {\n  return new Promise(function(resolve, reject) {\n    if (obj.transform) {\n      obj['-webkit-transform'] = obj.transform;\n    }\n\n    var objKeys = Object.keys(obj);\n\n    if (duration) {\n      el.style.transitionProperty = objKeys.join();\n      if (easing) el.style.transitionTimingFunction = easing;\n      el.style.transitionDuration = duration + 's';\n      el.offsetLeft; // style recalc\n\n      el.addEventListener('transitionend', function te() {\n        el.style.transitionProperty = '';\n        el.style.transitionTimingFunction = '';\n        el.style.transitionDuration = '';\n        resolve();\n        el.removeEventListener('transitionend', te);\n      });\n    }\n    else {\n      resolve();\n    }\n\n    objKeys.forEach(function(key) {\n      el.style.setProperty(key, obj[key]);\n    });\n  });\n};\n","import MaterialTextfield from './mdl/textfield';\nimport simpleTransition from 'simple-transition';\nimport SpinnerView from './views/spinner';\nimport tests from './tests';\n\nexport default class TestController {\n  constructor(container) {\n    this._memeContainer = container.querySelector('.meme-container');\n    this._memeImgContainer = container.querySelector('.meme-img-container');\n    this._feedbackText = container.querySelector('.feedback-text');\n    this._form = container.querySelector('.test-form');\n    this._currentMemeImg = null;\n    this._spinner = new SpinnerView();\n\n    this._memeContainer.appendChild(this._spinner.container);\n\n    new MaterialTextfield(container.querySelector('.mdl-js-textfield'));\n    this._form.addEventListener('submit', e => this._onSubmit(e));\n    this._form.testId.addEventListener('input', e => this._onInput(e));\n\n  }\n\n  _onInput(event) {\n    if (!this._form.testId.value.trim()) {\n      this._removeCurrentFeedback();\n    }\n  }\n\n  _onSubmit(event) {\n    event.preventDefault();\n    const val = this._form.testId.value.trim().toLowerCase();\n    this._form.testId.blur();\n    \n    this._removeCurrentFeedback();\n    simpleTransition(this._memeContainer, {opacity: 1}, 0.3);\n    this._spinner.show(800);\n\n    if (!tests[val]) {\n      this._displayFeedback(\"Didn't recognise that test ID\", 'mistake.gif', false);\n      return;\n    }\n\n    tests[val]().then(args => {\n      this._displayFeedback(...args);\n    }).catch(err => {\n      this._displayFeedback(\"Oh dear, something went really wrong\", 'mistake.gif', false);\n      throw err;\n    });\n  }\n\n  _removeCurrentFeedback() {\n    this._feedbackText.textContent = '';\n    this._memeContainer.style.opacity = '';\n    this._spinner.hide();\n\n    if (this._currentMemeImg) {\n      URL.revokeObjectURL(this._currentMemeImg.href);\n      this._memeImgContainer.removeChild(this._currentMemeImg);\n      this._currentMemeImg = undefined;\n    }\n  }\n\n  _displayFeedback(text, url, winning) {\n    this._feedbackText.textContent = text;\n    this._spinner.hide();\n\n    if (winning) {\n      this._feedbackText.classList.remove('fail');\n    }\n    else {\n      this._feedbackText.classList.add('fail');\n    }\n\n    return fetch(`/imgs/test-memes/${url}`).then(r => r.blob()).then(blob => {\n      this._currentMemeImg = new Image();\n      // hahaha, yes, I know\n      this._currentMemeImg.src = URL.createObjectURL(blob.slice(1));\n      this._memeImgContainer.appendChild(this._currentMemeImg);\n    });\n  }\n}","import TestController from './TestController';\n\nconst settingsForm = document.querySelector('.settings-form');\n\nsettingsForm.addEventListener('change', () => {\n  fetch(settingsForm.action, {\n    method: settingsForm.method,\n    body: new FormData(settingsForm)\n  });\n});\n\nif (!self.fetch) {\n  document.querySelector('.warning').style.display = 'block';\n}\n\nnew TestController(document.querySelector('.tester'));","/**\n * @license\n * Copyright 2015 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\n/**\n * Class constructor for Textfield MDL component.\n * Implements MDL component design pattern defined at:\n * https://github.com/jasonmayes/mdl-component-design-pattern\n *\n * @constructor\n * @param {HTMLElement} element The element that will be upgraded.\n */\nexport default function MaterialTextfield(element) {\n  this.element_ = element;\n  this.maxRows = this.Constant_.NO_MAX_ROWS;\n  // Initialize instance.\n  this.init();\n}\n\n/**\n * Store constants in one place so they can be updated easily.\n *\n * @enum {string | number}\n * @private\n */\nMaterialTextfield.prototype.Constant_ = {\n  NO_MAX_ROWS: -1,\n  MAX_ROWS_ATTRIBUTE: 'maxrows'\n};\n\n/**\n * Store strings for class names defined by this component that are used in\n * JavaScript. This allows us to simply change it in one place should we\n * decide to modify at a later date.\n *\n * @enum {string}\n * @private\n */\nMaterialTextfield.prototype.CssClasses_ = {\n  LABEL: 'mdl-textfield__label',\n  INPUT: 'mdl-textfield__input',\n  IS_DIRTY: 'is-dirty',\n  IS_FOCUSED: 'is-focused',\n  IS_DISABLED: 'is-disabled',\n  IS_INVALID: 'is-invalid',\n  IS_UPGRADED: 'is-upgraded'\n};\n\n/**\n * Handle input being entered.\n *\n * @param {Event} event The event that fired.\n * @private\n */\nMaterialTextfield.prototype.onKeyDown_ = function(event) {\n  var currentRowCount = event.target.value.split('\\n').length;\n  if (event.keyCode === 13) {\n    if (currentRowCount >= this.maxRows) {\n      event.preventDefault();\n    }\n  }\n};\n\n/**\n * Handle focus.\n *\n * @param {Event} event The event that fired.\n * @private\n */\nMaterialTextfield.prototype.onFocus_ = function(event) {\n  this.element_.classList.add(this.CssClasses_.IS_FOCUSED);\n};\n\n/**\n * Handle lost focus.\n *\n * @param {Event} event The event that fired.\n * @private\n */\nMaterialTextfield.prototype.onBlur_ = function(event) {\n  this.element_.classList.remove(this.CssClasses_.IS_FOCUSED);\n};\n\n/**\n * Handle reset event from out side.\n *\n * @param {Event} event The event that fired.\n * @private\n */\nMaterialTextfield.prototype.onReset_ = function(event) {\n  this.updateClasses_();\n};\n\n/**\n * Handle class updates.\n *\n * @private\n */\nMaterialTextfield.prototype.updateClasses_ = function() {\n  this.checkDisabled();\n  this.checkValidity();\n  this.checkDirty();\n};\n\n// Public methods.\n\n/**\n * Check the disabled state and update field accordingly.\n *\n * @public\n */\nMaterialTextfield.prototype.checkDisabled = function() {\n  if (this.input_.disabled) {\n    this.element_.classList.add(this.CssClasses_.IS_DISABLED);\n  } else {\n    this.element_.classList.remove(this.CssClasses_.IS_DISABLED);\n  }\n};\nMaterialTextfield.prototype['checkDisabled'] =\n    MaterialTextfield.prototype.checkDisabled;\n\n/**\n * Check the validity state and update field accordingly.\n *\n * @public\n */\nMaterialTextfield.prototype.checkValidity = function() {\n  if (this.input_.validity) {\n    if (this.input_.validity.valid) {\n      this.element_.classList.remove(this.CssClasses_.IS_INVALID);\n    } else {\n      this.element_.classList.add(this.CssClasses_.IS_INVALID);\n    }\n  }\n};\nMaterialTextfield.prototype['checkValidity'] =\n    MaterialTextfield.prototype.checkValidity;\n\n/**\n * Check the dirty state and update field accordingly.\n *\n * @public\n */\nMaterialTextfield.prototype.checkDirty = function() {\n  if (this.input_.value && this.input_.value.length > 0) {\n    this.element_.classList.add(this.CssClasses_.IS_DIRTY);\n  } else {\n    this.element_.classList.remove(this.CssClasses_.IS_DIRTY);\n  }\n};\nMaterialTextfield.prototype['checkDirty'] =\n    MaterialTextfield.prototype.checkDirty;\n\n/**\n * Disable text field.\n *\n * @public\n */\nMaterialTextfield.prototype.disable = function() {\n  this.input_.disabled = true;\n  this.updateClasses_();\n};\nMaterialTextfield.prototype['disable'] = MaterialTextfield.prototype.disable;\n\n/**\n * Enable text field.\n *\n * @public\n */\nMaterialTextfield.prototype.enable = function() {\n  this.input_.disabled = false;\n  this.updateClasses_();\n};\nMaterialTextfield.prototype['enable'] = MaterialTextfield.prototype.enable;\n\n/**\n * Update text field value.\n *\n * @param {string} value The value to which to set the control (optional).\n * @public\n */\nMaterialTextfield.prototype.change = function(value) {\n\n  if (value) {\n    this.input_.value = value;\n  } else {\n    this.input_.value = '';\n  }\n  this.updateClasses_();\n};\nMaterialTextfield.prototype['change'] = MaterialTextfield.prototype.change;\n\n/**\n * Initialize element.\n */\nMaterialTextfield.prototype.init = function() {\n\n  if (this.element_) {\n    this.label_ = this.element_.querySelector('.' + this.CssClasses_.LABEL);\n    this.input_ = this.element_.querySelector('.' + this.CssClasses_.INPUT);\n\n    if (this.input_) {\n      if (this.input_.hasAttribute(\n            /** @type {string} */ (this.Constant_.MAX_ROWS_ATTRIBUTE))) {\n        this.maxRows = parseInt(this.input_.getAttribute(\n            /** @type {string} */ (this.Constant_.MAX_ROWS_ATTRIBUTE)), 10);\n        if (isNaN(this.maxRows)) {\n          this.maxRows = this.Constant_.NO_MAX_ROWS;\n        }\n      }\n\n      this.boundUpdateClassesHandler = this.updateClasses_.bind(this);\n      this.boundFocusHandler = this.onFocus_.bind(this);\n      this.boundBlurHandler = this.onBlur_.bind(this);\n      this.boundResetHandler = this.onReset_.bind(this);\n      this.input_.addEventListener('input', this.boundUpdateClassesHandler);\n      this.input_.addEventListener('focus', this.boundFocusHandler);\n      this.input_.addEventListener('blur', this.boundBlurHandler);\n      this.input_.addEventListener('reset', this.boundResetHandler);\n\n      if (this.maxRows !== this.Constant_.NO_MAX_ROWS) {\n        // TODO: This should handle pasting multi line text.\n        // Currently doesn't.\n        this.boundKeyDownHandler = this.onKeyDown_.bind(this);\n        this.input_.addEventListener('keydown', this.boundKeyDownHandler);\n      }\n\n      this.updateClasses_();\n      this.element_.classList.add(this.CssClasses_.IS_UPGRADED);\n    }\n  }\n};\n\n/**\n * Downgrade the component\n *\n * @private\n */\nMaterialTextfield.prototype.mdlDowngrade_ = function() {\n  this.input_.removeEventListener('input', this.boundUpdateClassesHandler);\n  this.input_.removeEventListener('focus', this.boundFocusHandler);\n  this.input_.removeEventListener('blur', this.boundBlurHandler);\n  this.input_.removeEventListener('reset', this.boundResetHandler);\n  if (this.boundKeyDownHandler) {\n    this.input_.removeEventListener('keydown', this.boundKeyDownHandler);\n  }\n};","export default class WindowMessenger {\n  constructor(url) {\n    this._requestId = 0;\n    \n    this._iframe = document.createElement('iframe');\n    this._iframe.className = 'hidden-tester';\n    this._ready = new Promise((resolve, reject) => {\n      const listener = e => {\n        resolve();\n        this._iframe.removeEventListener('load', listener);\n        this._iframe.removeEventListener('error', errorListener);\n      };\n      const errorListener = e => {\n        reject(Error(\"Iframe load failed\"));\n        this._iframe.removeEventListener('load', listener);\n        this._iframe.removeEventListener('error', errorListener);\n      };\n      this._iframe.addEventListener('load', listener);\n      this._iframe.addEventListener('error', errorListener);\n      this._iframe.src = url;\n    });\n    document.body.appendChild(this._iframe);\n\n    this._targetOrigin = new URL(url).origin;\n\n    this._windowListener = event => this._onMessage(event);\n    self.addEventListener('message', this._windowListener);\n\n    // message jobs awaiting response {callId: [resolve, reject]}\n    this._pending = {};\n  }\n\n  destruct() {\n    document.body.removeChild(this._iframe);\n    self.removeEventListener('message', this._windowListener);\n  }\n\n  _onMessage(event) {\n    if (event.origin != this._targetOrigin) return;\n\n    if (!event.data.id) {\n      console.log(\"Unexpected message\", event);\n      return;\n    }\n\n    var resolver = this._pending[event.data.id];\n\n    if (!resolver) {\n      console.log(\"No resolver for\", event);\n      return;\n    }\n\n    delete this._pending[event.data.id];\n\n    if (event.data.error) {\n      resolver[1](new Error(event.data.error));\n      return;\n    }\n\n    resolver[0](event.data.result);\n  }\n\n  message(message) {\n    return this._ready.then(_ => {\n      const requestId = ++this._requestId;\n      message.id = requestId;\n\n      return new Promise((resolve, reject) => {\n        this._pending[requestId] = [resolve, reject];\n        this._iframe.contentWindow.postMessage(message, this._targetOrigin);\n      });\n    });\n  }\n}\n","import WindowMessenger from './WindowMessenger';\n\nconst appOrigin = new URL(location.href);\nappOrigin.port = self.config.appPort;\nconst executorUrl = new URL('/remote?bypass-sw', appOrigin);\n\nfunction remoteEval(js) {\n  const messenger = new WindowMessenger(executorUrl);\n  let error;\n\n  if (typeof js === 'function') {\n    js = '(' + js.toString() + ')()';\n  }\n\n  return figureOutConnectionType().then(type => {\n    if (type === 'offline') return [\"Looks like the server is offline\", 'sad.gif', false];\n\n    return messenger.message({\n      eval: js\n    }).catch(err => {\n      error = err;\n    }).then(val => {\n      messenger.destruct();\n      if (error) throw error;\n      return val;\n    });\n  });\n\n}\n\nfunction figureOutConnectionType() {\n  const start = performance.now();\n\n  return Promise.race([\n    fetch(new URL('/ping', appOrigin)),\n    new Promise(r => setTimeout(r, 4000))\n  ]).then(_ => {\n    const duration = performance.now() - start;\n\n    if (duration < 3000) {\n      return 'perfect';\n    }\n    if (duration < 3500) {\n      return 'slow';\n    }\n    return 'lie-fi';\n  }, _ => {\n    return 'offline';\n  });\n}\n\nexport default {\n  demo() {\n    return Promise.resolve([\"Yep, the demo's working!\", 'demo.gif', true]);\n  },\n  offline() {\n    return figureOutConnectionType().then(type => {\n      if (type == 'offline') {\n        return [\"Yep! The server is totally dead!\", '1.gif', true];\n      }\n      return [\"Hmm, no, looks like the server is still up\", 'nope.gif', false];\n    });\n  },\n  ['lie-fi']() {\n    return figureOutConnectionType().then(type => {\n      switch(type) {\n        case \"lie-fi\":\n          return [\"Yeeeep, that's lie-fi alright.\", '2.gif', true];\n        case \"offline\":\n          return [\"Hmm, no, looks like the server is down.\", 'nope.gif', false];\n        default:\n          return [\"The server responded way too fast for lie-fi.\", 'not-quite.gif', false];\n      }\n    });\n  },\n  registered() {\n    return remoteEval(function() {\n      if (navigator.serviceWorker.controller) return [\"Service worker successfully registered!\", '3.gif', true];\n      return [\"Doesn't look like there's a service worker registered :(\", 'nope.gif', false];\n    });\n  },\n  ['sw-waiting']() {\n    return remoteEval(function() {\n      return navigator.serviceWorker.getRegistration('/').then(reg => {\n        if (!reg) return [\"Doesn't look like there's a service worker registered at all!\", 'sad.gif', false];\n        if (!reg.waiting) return [\"There's no service worker waiting\", 'nope.gif', false];\n        return [\"Yey! There's a service worker waiting!\", \"4.gif\", true];\n      });\n    });\n  },\n  ['sw-active']() {\n    return remoteEval(function() {\n      return navigator.serviceWorker.getRegistration('/').then(reg => {\n        if (!reg) return [\"Doesn't look like there's a service worker registered at all!\", 'sad.gif', false];\n        if (reg.waiting) return [\"There's still a service worker waiting\", 'nope.gif', false];\n        return [\"No service worker waiting! Yay!\", \"5.gif\", true];\n      });\n    });\n  },\n  ['html-response']() {\n    return remoteEval(function() {\n      return fetch('/').then(response => {\n        const type = response.headers.get('content-type');\n\n        if (!type || (type.toLowerCase() != 'text/html' && !type.toLowerCase().startsWith('text/html'))) {\n          return [\"The response doesn't have the 'Content-Type: text/html' header\", 'nope.gif', false];\n        }\n\n        return response.text().then(text => new DOMParser().parseFromString(text, 'text/html')).then(doc => {\n          if (doc.body.querySelector('.a-winner-is-me')) {\n            return [\"Custom HTML response found! Yay!\", \"6.gif\", true];\n          }\n          return [\"Can't find an element with class 'a-winner-is-me'\", 'nope.gif', false];\n        });\n      });\n    });\n  },\n  ['gif-response']() {\n    return remoteEval(function() {\n      return fetch('/').then(response => {\n        const type = response.headers.get('content-type');\n\n        if (!type || !type.toLowerCase().startsWith('text/html')) {\n          return [\"Looks like it isn't just URLs ending with .jpg that are being intercepted\", 'not-quite.gif', false];\n        }\n\n        return fetch('/blah.jpg').then(response => {\n          const type = response.headers.get('content-type');\n\n          if (!type || !type.toLowerCase().startsWith('image/gif')) {\n            return [\"Doesn't look like urls ending .jpg are getting a gif in response\", 'no-cry.gif', false];\n          }\n\n          return [\"Images are being intercepted!\", \"7.gif\", true];\n        })\n      });\n    })\n  },\n  ['gif-404']() {\n    return remoteEval(function() {\n      return Promise.all([\n        fetch('/'),\n        fetch('/imgs/dr-evil.gif?bypass-sw'),\n        fetch('/' + Math.random())\n      ]).then(responses => {\n        const pageType = responses[0].headers.get('content-type');\n\n        if (!pageType || !pageType.toLowerCase().startsWith('text/html')) {\n          return [\"Looks like non-404 pages are getting the gif too\", 'not-quite.gif', false];\n        }\n\n        const type = responses[2].headers.get('content-type');\n\n        if (!type || !type.toLowerCase().startsWith('image/gif')) {\n          return [\"Doesn't look like 404 responses are getting a gif in return\", 'nope.gif', false];\n        }\n\n        return Promise.all(\n          responses.slice(1).map(r => r.arrayBuffer().then(b => new Uint8Array(b)))\n        ).then(arrays => {\n          const itemsToCheck = 2000;\n          const a1 = arrays[0];\n          const a2 = arrays[1];\n\n          for (let i = 0; i < itemsToCheck; i++) {\n            if (a1[i] !== a2[i]) {\n              return [\"Doesn't look like 404 responses are getting the dr-evil gif in return\", 'not-quite.gif', false];\n            }\n          }\n          return [\"Yay! 404 pages get gifs!\", \"8.gif\", true];\n        })\n      })\n    });\n  },\n  ['install-cached']() {\n    return remoteEval(function() {\n      const expectedUrls = [\n        '/',\n        '/js/main.js',\n        '/css/main.css',\n        '/imgs/icon.png',\n        'https://fonts.gstatic.com/s/roboto/v15/2UX7WLTfW3W8TclTUvlFyQ.woff',\n        'https://fonts.gstatic.com/s/roboto/v15/d-6IYplOFocCacKzxwXSOD8E0i7KZn-EPnyo3HZu7kw.woff'\n      ].map(url => new URL(url, location).href);\n\n      return caches.has('wittr-static-v1').then(has => {\n        if (!has) return [\"Can't find a cache named wittr-static-v1\", 'nope.gif', false];\n\n        return caches.open('wittr-static-v1').then(c => c.keys()).then(reqs => {\n          const urls = reqs.map(r => r.url);\n          const allAccountedFor = expectedUrls.every(url => urls.includes(url));\n\n          if (allAccountedFor) {\n            return [\"Yay! The cache is ready to go!\", \"9.gif\", true];\n          }\n          return [\"The cache is there, but it's missing some things\", 'not-quite.gif', false];\n        });\n      })\n    });\n  },\n  ['cache-served']() {\n    return remoteEval(function() {\n      return Promise.all([\n        fetch('/'),\n        fetch('/ping').then(r => r.json()).catch(e => ({ok: false}))\n      ]).then(responses => {\n        const cachedResponse = responses[0];\n        const jsonResponse = responses[1];\n\n        if (!jsonResponse.ok) return [\"Doesn't look like non-cached requests are getting through\", 'not-quite.gif', false];\n\n        return new Promise(r => setTimeout(r, 2000)).then(_ => fetch('/')).then(response => {\n          if (cachedResponse.headers.get('Date') === response.headers.get('Date')) {\n            return [\"Yay! Cached responses are being returned!\", \"10.gif\", true];\n          }\n          return [\"Doesn't look like responses are returned from the cache\", 'nope.gif', false];\n        })\n      });\n    });\n  },\n  ['new-cache-ready']() {\n    return remoteEval(function() {\n      return Promise.all([\n        caches.has('wittr-static-v1'),\n        caches.has('wittr-static-v2')\n      ]).then(hasCaches => {\n        if (!hasCaches[0]) return [\"Looks like the v1 cache has already gone\", 'sad.gif', false];\n        if (!hasCaches[1]) return [\"Can't find the wittr-static-v2 cache\", 'sad.gif', false];\n\n        return Promise.all(\n          ['wittr-static-v1', 'wittr-static-v2'].map(name => {\n            return caches.open(name)\n              .then(c => c.match('/css/main.css'))\n              .then(r => r && r.text())\n          })\n        ).then(cssTexts => {\n          if (!cssTexts[0]) return [\"Can't find CSS in the v1 cache\", 'sad.gif', false];\n          if (!cssTexts[1]) return [\"Can't find CSS in the v2 cache\", 'sad.gif', false];\n\n          if (cssTexts[0] === cssTexts[1]) {\n            return [\"There's a new cache, but the CSS looks the same\", 'nope.gif', false];\n          }\n          return [\"Yay! The new cache is ready, but isn't disrupting current pages\", \"11.gif\", true];\n        });\n      });\n    })\n  },\n  ['new-cache-used']() {\n    return remoteEval(function() {\n      return Promise.all([\n        caches.has('wittr-static-v1'),\n        caches.has('wittr-static-v2')\n      ]).then(hasCaches => {\n        if (hasCaches[0]) return [\"Looks like the v1 cache is still there\", 'not-quite.gif', false];\n        if (!hasCaches[1]) return [\"Can't find the wittr-static-v2 cache\", 'sad.gif', false];\n\n        return Promise.all([\n          fetch('/css/main.css'),\n          new Promise(r => setTimeout(r, 2000)).then(_ => fetch('/css/main.css'))\n        ]).then(responses => {\n          if (responses[0].headers.get('Date') != responses[1].headers.get('Date')) {\n            return [\"Doesn't look like the CSS is being served from the cache\", 'mistake.gif', false];\n          }\n\n          return openIframe('/').then(iframe => {\n            const win = iframe.contentWindow;\n            const doc = win.document;\n            const bg = win.getComputedStyle(doc.querySelector('.toolbar')).backgroundColor;\n\n            if (bg == 'rgb(63, 81, 181)') {\n              return [\"Doesn't look like the header color has changed\", 'no-cry.gif', false]; \n            }\n            return [\"Yay! You safely updated the CSS!\", \"12.gif\", true];\n          });\n        })\n      })\n    });\n  },\n  ['update-notify']() {\n    return remoteEval(function() {\n      return navigator.serviceWorker.getRegistration().then(reg => {\n        if (!reg.waiting) return [\"Doesn't look like there's a waiting worker\", 'nope.gif', false];\n\n        return openIframe('/').then(iframe => {\n          const win = iframe.contentWindow;\n          const doc = win.document;\n\n          return new Promise(r => setTimeout(r, 500)).then(_ => {\n            if (doc.querySelector('.toast')) {\n              return [\"Yay! There are notifications!\", \"13.gif\", true];\n            }\n            return [\"Doesn't look like there's a notification being triggered\", 'sad.gif', false];\n          })\n        });\n      });\n    })\n  },\n  ['update-reload']() {\n    return remoteEval(function() {\n      return navigator.serviceWorker.getRegistration().then(reg => {\n        if (!reg.waiting) return [\"Doesn't look like there's a waiting worker\", 'nope.gif', false];\n\n        return openIframe('/').then(iframe => {\n          const win = iframe.contentWindow;\n          const doc = win.document;\n\n          return new Promise(resolve => {\n            setTimeout(_ => resolve([\"Didn't detect the page being reloaded :(\", 'sad.gif', false]), 8000);\n            iframe.addEventListener('load', _ => {\n              resolve([\"Yay! The page reloaded!\", \"14.gif\", true]);\n            })\n          });\n        });\n      });\n    })\n  },\n  ['serve-skeleton']() {\n    return remoteEval(function() {\n      return fetch('/').then(r => r.text()).then(text => {\n        if (text.includes('post-content')) {\n          return [\"Doesn't look like the page skeleton is being served\", 'nope.gif', false];\n        }\n\n        return fetch('https://google.com/').then(r => r.text()).catch(e => '').then(gText => {\n          if (gText == text) {\n            return [\"Looks like you're serving the skeleton for https://google.com/ too!\", 'not-quite.gif', false];\n          }\n          return [\"Yay! The page skeleton is being served!\", \"15.gif\", true];\n        });\n      });\n    });\n  },\n  ['idb-animal']() {\n    return remoteEval(function() {\n      return openDb('test-db').then(db => {\n        const tx = db.transaction('keyval');\n        return tx.objectStore('keyval').get('favoriteAnimal').then(animal => {\n          if (!animal) return [\"Can't find favoriteAnimal in keyval\", 'nope.gif', false];\n          return [\"Yay! Your favorite animal is \\\"\" + animal + \"\\\"\", \"16.gif\", true];\n        })\n      }, err => {\n        return [\"Couldn't open the test-db database at all :(\", 'sad.gif', false];\n      })\n    });\n  },\n  ['idb-age']() {\n    return remoteEval(function() {\n      return openDb('test-db').then(db => {\n        if (!Array.from(db.objectStoreNames).includes('people')) {\n          return [\"Can't find the 'people' objectStore\", 'mistake.gif', false]; \n        }\n\n        const tx = db.transaction('people');\n        const store = tx.objectStore('people');\n\n        if (!Array.from(store.indexNames).includes('age')) {\n          return [\"Can't find the 'age' index in the 'people' objectStore\", 'sad.gif', false];\n        }\n\n        const index = store.index('age');\n\n        if (index.keyPath == 'age') {\n          return [\"Yay! The age index is working\", \"17.gif\", true];\n        }\n\n        return [\"The age index isn't indexed by age\", 'nope.gif', false];\n      }, err => {\n        return [\"Couldn't open the test-db database at all :(\", 'sad.gif', false];\n      })\n    });\n  },\n  ['idb-store']() {\n    return remoteEval(function() {\n      return openDb('wittr').then(db => {\n        if (!Array.from(db.objectStoreNames).includes('wittrs')) {\n          return [\"There isn't a 'wittrs' objectStore\", 'sad.gif', false];\n        }\n\n        const tx = db.transaction('wittrs');\n        const store = tx.objectStore('wittrs');\n\n        if (store.keyPath != 'id') {\n          return [\"'wittrs' objectStore doesn't use 'id' as its primary key\", 'nope.gif', false];\n        }\n\n        if (!Array.from(store.indexNames).includes('by-date')) {\n          return [\"There isn't a 'by-date' index on the 'wittrs' objectStore\", 'nope.gif', false];\n        }\n\n        const index = store.index('by-date');\n\n        if (index.keyPath != 'time') {\n          return [\"The 'by-date' index isn't using 'time' as its key\", 'nope.gif', false];\n        }\n\n        return store.getAll().then(messages => {\n          if (!messages.length) {\n            return [\"The objectStore is there, but it's empty\", 'sad.gif', false];\n          }\n\n          const looksMessagey = messages.every(message => {\n            return message.id && message.avatar && message.name && message.time && message.body;\n          });\n\n          if (looksMessagey) {\n            return [\"The database is set up and populated!\", \"18.gif\", true];\n          }\n\n          return [\"Looks like some incorrect data is in the database\", 'not-quite.gif', false];\n        });\n      }, () => {\n        return [\"Couldn't open the 'wittr' database at all :(\", 'sad.gif', false];\n      });\n    });\n  },\n  ['idb-show']() {\n    return remoteEval(function() {\n      return openDb('wittr').then(db => {\n        return openIframe('/?no-socket').then(iframe => {\n          const win = iframe.contentWindow;\n          const doc = win.document;\n\n          return new Promise(r => setTimeout(r, 500)).then(() => {\n            const times = Array.from(doc.querySelectorAll('.post-content time'));\n            if (!times.length) return [\"Page looks empty without the web socket\", 'nope.gif', false];\n\n            const inOrder = times.map(t => new Date(t.getAttribute('datetime'))).every((time, i, arr) => {\n              const nextTime = arr[i+1];\n              if (!nextTime) return true;\n              return time >= nextTime;\n            });\n\n            if (!inOrder) return [\"So close! But the newest post should appear at the top\", 'not-quite.gif', false];\n            return [\"Page populated from IDB!\", \"19.gif\", true];\n          });\n        });\n      }, () => {\n        return [\"Couldn't open the 'wittr' database at all :(\", 'sad.gif', false];\n      });\n    });\n  },\n  ['idb-clean']() {\n    return remoteEval(function() {\n      return openDb('wittr').then(db => {\n        const tx = db.transaction('wittrs');\n        const store = tx.objectStore('wittrs');\n\n        return store.count().then(num => {\n          if (num > 30) {\n            return [\"There are more than 30 items in the store\", 'nope.gif', false];\n          }\n\n          if (num < 30) {\n            return [\"There are less than 30 items in the store, so it isn't clear if this is working\", 'not-quite.gif', false];\n          }\n\n          return [\"Looks like the database is being cleaned!\", \"20.gif\", true];\n        });\n      }, () => {\n        return [\"Couldn't open the 'wittr' database at all :(\", 'sad.gif', false];\n      });\n    });\n  },\n  ['cache-photos']() {\n    return remoteEval(function() {\n      return caches.has('wittr-content-imgs').then(hasCache => {\n        if (!hasCache) return [\"There isn't a 'wittr-content-imgs' cache\", 'sad.gif', false];\n\n        // clear cache\n        return caches.delete('wittr-content-imgs').then(() => {\n          const imageUrlSmall = '/photos/4-3087-2918949798-865f134ef3-320px.jpg';\n          const imageUrlMedium = '/photos/4-3087-2918949798-865f134ef3-640px.jpg';\n\n          return fetch(imageUrlMedium).then(medResponse => {\n            return new Promise(r => setTimeout(r, 2000))\n              .then(() => fetch(imageUrlMedium)).then(anotherMedResponse => {\n                if (medResponse.headers.get('Date') != anotherMedResponse.headers.get('Date')) {\n                  return [\"Doesn't look like images are being returned from the cache\", 'nope.gif', false];\n                }\n\n                return fetch(imageUrlSmall).then(smallResponse => {\n                  return Promise.all([smallResponse.blob(), medResponse.blob()]);\n                }).then(blobs => {\n                  if (blobs[0].size != blobs[1].size) {\n                    return [\"The originally cached image isn't being returned for different sizes\", 'nope.gif', false];\n                  }\n                  return [\"Photos are being cached and served correctly!\", \"21.gif\", true];\n                });\n              });\n          });\n        });\n      });\n    });\n  },\n  ['cache-clean']() {\n    return remoteEval(function() {\n      return caches.open('wittr-content-imgs').then(cache => {\n        const imageUrlMedium = '/photos/4-3087-2918949798-865f134ef3-640px.jpg';\n\n        return fetch(imageUrlMedium).then(r => r.blob()).then(() => new Promise(r => setTimeout(r, 500))).then(() => {\n          return cache.match('/photos/4-3087-2918949798-865f134ef3').then(response => {\n            if (!response) return [\"Photos aren't appearing in the cache where we'd expect\", 'not-quite.gif', false];\n\n            const start = Date.now();\n\n            return Promise.resolve().then(function checkCache() {\n              if (Date.now() - start > 8000) {\n                return [\"The image cache doesn't seem to be getting cleaned\", 'nope.gif', false]; \n              }\n\n              return cache.match('/photos/4-3087-2918949798-865f134ef3').then(response => {\n                if (!response) {\n                  return [\"Yay! The image cache is being cleaned!\", '22.gif', true];\n                }\n                return new Promise(r => setTimeout(r, 100)).then(checkCache);\n              });\n            });\n          });\n        });\n      });\n    });\n  },\n  ['cache-avatars']() {\n    return remoteEval(function() {\n      return caches.delete('wittr-content-imgs').then(() => {\n        const imageUrlSmall = '/avatars/marc-1x.jpg';\n        const imageUrlMedium = '/avatars/marc-2x.jpg';\n\n        return fetch(imageUrlSmall).then(smallResponse => {\n          return new Promise(r => setTimeout(r, 2000))\n            .then(() => fetch(imageUrlMedium)).then(medResponse => {\n              if (smallResponse.headers.get('Date') != medResponse.headers.get('Date')) {\n                return [\"Doesn't look like avatars are being returned from the cache, even if the request is for a different size\", 'nope.gif', false];\n              }\n\n              return new Promise(r => setTimeout(r, 2000)).then(() => fetch(imageUrlMedium)).then(anotherMedResponse => {\n                if (medResponse.headers.get('Date') == anotherMedResponse.headers.get('Date')) {\n                  return [\"Doesn't look like avatars are being updated after being returned from the cache\", 'nope.gif', false];\n                }\n                return [\"Avatars are being cached, served and updated correctly!\", \"23.gif\", true];\n              });\n            });\n        });\n      });\n    });\n  }\n};","import parseHTML from '../../utils/parseHTML';\n\nexport default class Spinner {\n  constructor() {\n    this.container = parseHTML(\n      '<div class=\"spinner\">' +\n        '<div class=\"spinner-container\">' +\n          '<div class=\"spinner-layer\">' +\n            '<div class=\"circle-clipper left\">' +\n              '<div class=\"circle\"></div>' +\n            '</div>' +\n            '<div class=\"gap-patch\">' +\n              '<div class=\"circle\"></div>' +\n            '</div>' +\n            '<div class=\"circle-clipper right\">' +\n              '<div class=\"circle\"></div>' +\n            '</div>' +\n          '</div>' +\n        '</div>' +\n      '</div>' +\n    '').firstChild;\n\n    this._showTimeout = null;\n    this.container.style.display = 'none';\n\n    var animEndListener = event => {\n      if (event.target == this.container) {\n        this.container.style.display = 'none';\n      }\n    };\n\n    this.container.addEventListener('webkitAnimationEnd', animEndListener);\n    this.container.addEventListener('animationend', animEndListener);\n  }\n\n  show(delay = 300) {\n    clearTimeout(this._showTimeout);\n    this.container.style.display = 'none';\n    this.container.classList.remove('cooldown');\n    this._showTimeout = setTimeout(_ => {\n      this.container.style.display = '';\n    }, delay);\n  }\n\n  hide() {\n    clearTimeout(this._showTimeout);\n    this.container.classList.add('cooldown');\n  }\n}\n","var contextRange = document.createRange();\ncontextRange.setStart(document.body, 0);\n\nexport default function strToEls(str) {\n  return contextRange.createContextualFragment(str);\n}"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset:utf-8;base64,"}