{"version":3,"sources":["Settings.js"],"names":[],"mappings":"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","file":"Settings.js","sourcesContent":["import express from 'express';\nimport zlib from 'zlib';\nimport compression from 'compression';\nimport {EventEmitter} from 'events';\nimport readFormBody from './readFormBody';\nimport indexTemplate from './templates/index';\nimport settingsTemplate from './templates/settings';\n\nconst compressor = compression({\n  flush: zlib.Z_PARTIAL_FLUSH\n});\n\nconst connectionTypes = ['perfect', 'slow', 'lie-fi', 'offline'];\n\nexport default class Server extends EventEmitter {\n  constructor(port, appPort) {\n    super();\n    this._app = express();\n    this._port = port;\n    this._appPort = appPort;\n    this._currentConnectionType = 'perfect';\n\n    const staticOptions = {\n      maxAge: 0\n    };\n\n    this._app.use('/js', express.static('../public/js', staticOptions));\n    this._app.use('/css', express.static('../public/css', staticOptions));\n    this._app.use('/imgs', express.static('../public/imgs', staticOptions));\n\n    this._app.get('/', compressor, (req, res) => {\n      res.send(indexTemplate({\n        scripts: '<script src=\"/js/settings.js\" defer></script>',\n        extraCss: '<link rel=\"stylesheet\" href=\"/css/settings.css\" />',\n        content: settingsTemplate({\n          appPort: this._appPort,\n          currentConnectionType: this._currentConnectionType,\n          connectionTypes: [\n            {value: 'perfect', title: \"Perfect\"},\n            {value: 'slow', title: \"Slow\"},\n            {value: 'lie-fi', title: \"Lie-fi\"},\n            {value: 'offline', title: \"Offline\"},\n          ].map(type => {\n            type.checked = type.value === this._currentConnectionType;\n            return type;\n          })\n        })\n      }));\n    });\n\n    this._app.post('/set', compressor, readFormBody(), (req, res) => {\n      if (!req.body\n      || !req.body.connectionType\n      || connectionTypes.indexOf(req.body.connectionType) == -1) {\n        return res.sendStatus(400);\n      }\n\n      res.send({\n        ok: true\n      });\n\n      this._currentConnectionType = req.body.connectionType;\n      this.emit('connectionChange', {type: req.body.connectionType});\n    });\n  }\n\n  listen() {\n    this._app.listen(this._port, _ => {\n      console.log(\"Config server listening at localhost:\" + this._port);\n    });\n  }\n}"]}